name: Deploy to pypi.org
on:
  push:
    branches:
      - main    # on each push to the main branch, check if this version already has a tag
  workflow_dispatch:


jobs:

  unit_test:
    if: github.ref == 'refs/heads/main' # Only run if branch is main
    name: full unit test matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        deps-resolution: ["lowest-direct", "highest"]
        optional-deps: ["none", "benchmarking"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ vars.UV_VERSION }}

      - name: Set up venv, Python ${{ matrix.python-version }} & dependencies
        run:  |
            uv python install ${{ matrix.python-version }}
            uv venv --python ${{ matrix.python-version }}
            source .venv/bin/activate
            if [ "${{ matrix.optional-deps }}" = "benchmarking" ]; then
                uv pip compile --resolution ${{ matrix.deps-resolution }} --extra benchmarking --group dev pyproject.toml
                uv sync --extra benchmarking --dev 
            else
                uv pip compile --resolution ${{ matrix.deps-resolution }} --group dev pyproject.toml
                uv sync --dev
            fi

      - name: Run tests
        run:  |
            if [ "${{ matrix.optional-deps }}" = "benchmarking" ]; then
                uv run pytest ./tests -m "not requires_no_benchmarking_deps"
            else
                uv run pytest ./tests/counting ./tests/shared -m "not requires_benchmarking_deps"
            fi

  tag_as_release:
    name: tag as release
    needs:
      - unit_test
    runs-on: ubuntu-latest
    steps:
      - name: Full checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch all history and tags

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ vars.UV_VERSION }}

      - name: Create tag
        run: |
          TAG="v$( uv version --short )"  
          if git show-ref --tags --verify --quiet "refs/tags/${TAG}"; then
            echo "Tag ${TAG} already exists --> do not create & fail this step"
            exit -1
          else
            echo "Tag ${TAG} does not exist --> create it now"
            git tag "$TAG"
            git push origin "$TAG"
          fi

  deploy:
    name: release (pypi.org)
    needs: tag_as_release
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ vars.UV_VERSION }}

      - name: Build package with uv
        run: uv build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          
  bump_dev_version:
    name: bump dev version
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch everything, so all branches are available

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ vars.UV_VERSION }}

      - name: Bump dev version if needed
        run: |
          git checkout main
          git pull origin main
          ver_main="$( uv version --short )"
          git checkout develop
          git pull origin develop
          ver_develop="$( uv version --short )"          
          if [ "${ver_main}" = "${ver_develop}" ]; then
            echo "main & develop branches are both on package version ${ver_main}"
            echo "bumping develop branch version to make sure it stays ahead of main"
            uv version --bump patch
            ver_develop_new="$(uv version --short)"
            echo "Bumped ${ver_develop} -> ${ver_develop_new}"
            git config --local user.name "GitHub Actions"
            git config --local user.email ""
            git add pyproject.toml
            git commit -m "Bump package version ${ver_develop} -> ${ver_develop_new}"
            git push origin develop
          else
            echo "main & develop branches are on different package versions ${ver_main} vs ${ver_develop}"
            echo "no need to bump develop branch version"
          fi          